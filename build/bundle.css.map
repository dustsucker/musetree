{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Modal.svelte",
    "../../App.svelte",
    "../../AboutModal.svelte",
    "../../ChangeLogModal.svelte",
    "../../HelpModal.svelte",
    "../../Button.svelte",
    "../../FileInput.svelte",
    "../../InstrumentCheckbox.svelte",
    "../../DisplayOptions.svelte",
    "../../DisplayOptionsModal.svelte",
    "../../GenerationOptions.svelte",
    "../../GenerationOptionsModal.svelte",
    "../../GenresModal.svelte",
    "../../ExportModal.svelte",
    "../../ImportModal.svelte",
    "../../LoadingProgressBar.svelte",
    "../../LoadingSpinner.svelte",
    "../../Tooltip.svelte",
    "../../SectionCanvas.svelte",
    "../../Timeline.svelte",
    "../../Track.svelte",
    "../../TrackControls.svelte",
    "../../VisibilityGuard.svelte",
    "../../TrackInfo.svelte",
    "../../ContextModal.svelte",
    "../../DeleteConfirmationModal.svelte",
    "../../TreeVis.svelte",
    "../../TreeVisBranch.svelte",
    "../../TreeVisRoot.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { setContext as baseSetContext } from 'svelte';\n  import { fade } from 'svelte/transition';\n\n  export let key = 'simple-modal';\n  export let closeButton = true;\n  export let closeOnEsc = true;\n  export let closeOnOuterClick = true;\n  export let styleBg = { top: 0, left: 0 };\n  export let styleWindow = {};\n  export let styleContent = {};\n  export let setContext = baseSetContext;\n  export let transitionBg = fade;\n  export let transitionBgProps = { duration: 250 };\n  export let transitionWindow = transitionBg;\n  export let transitionWindowProps = transitionBgProps;\n\n  const defaultState = {\n    closeButton,\n    closeOnEsc,\n    closeOnOuterClick,\n    styleBg,\n    styleWindow,\n    styleContent,\n    transitionBg,\n    transitionBgProps,\n    transitionWindow,\n    transitionWindowProps,\n  };\n  let state = { ...defaultState };\n\n  let Component = null;\n  let props = null;\n\n  let background;\n  let wrap;\n\n  const camelCaseToDash = str => str\n    .replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase();\n\n  const toCssString = (props) => Object.keys(props)\n    .reduce((str, key) => `${str}; ${camelCaseToDash(key)}: ${props[key]}`, '');\n\n  $: cssBg = toCssString(state.styleBg);\n  $: cssWindow = toCssString(state.styleWindow);\n  $: cssContent = toCssString(state.styleContent);\n  $: currentTransitionBg = state.transitionBg;\n  $: currentTransitionWindow = state.transitionWindow;\n\n  const toVoid = () => {};\n  let onOpen = toVoid;\n  let onClose = toVoid;\n  let onOpened = toVoid;\n  let onClosed = toVoid;\n\n  const open = (\n    NewComponent,\n    newProps = {},\n    options = {},\n    callback = {}\n  ) => {\n    Component = NewComponent;\n    props = newProps;\n    state = { ...defaultState, ...options };\n    onOpen = callback.onOpen || toVoid;\n    onClose = callback.onClose || toVoid;\n    onOpened = callback.onOpened || toVoid;\n    onClosed = callback.onClosed || toVoid;\n  };\n\n  const close = (callback = {}) => {\n    onClose = callback.onClose || onClose;\n    onClosed = callback.onClosed || onClosed;\n    Component = null;\n    props = null;\n  };\n\n  const handleKeyup = (event) => {\n    if (state.closeOnEsc && Component && event.key === 'Escape') {\n      event.preventDefault();\n      close();\n    }\n  };\n\n  const handleOuterClick = (event) => {\n    if (\n      state.closeOnOuterClick && (\n        event.target === background || event.target === wrap\n      )\n    ) {\n      event.preventDefault();\n      close();\n    }\n  };\n\n  setContext(key, { open, close });\n</script>\n\n<style>\n  * {\n    box-sizing: border-box;\n  }\n\n  .bg {\n    position: fixed;\n    z-index: 1000;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 100vw;\n    height: 100vh;\n    background: rgba(0, 0, 0, 0.66);\n  }\n\n  .window-wrap {\n    position: relative;\n    margin: 2rem;\n    max-height: 100%;\n  }\n\n  .window {\n    position: relative;\n    width: 40rem;\n    max-width: 100%;\n    max-height: 100%;\n    margin: 2rem auto;\n    color: black;\n    border-radius: 0.5rem;\n    background: white;\n  }\n\n  .content {\n    position: relative;\n    padding: 1rem;\n    max-height: calc(100vh - 4rem);\n    overflow: auto;\n  }\n\n  .close {\n    display: block;\n    box-sizing: border-box;\n    position: absolute;\n    z-index: 1000;\n    top: 1rem;\n    right: 1rem;\n    margin: 0;\n    padding: 0;\n    width: 1.5rem;\n    height: 1.5rem;\n    border: 0;\n    color: black;\n    border-radius: 1.5rem;\n    background: white;\n    box-shadow: 0 0 0 1px black;\n    transition: transform 0.2s cubic-bezier(0.25, 0.1, 0.25, 1),\n                background 0.2s cubic-bezier(0.25, 0.1, 0.25, 1);\n    -webkit-appearance: none;\n  }\n\n  .close:before, .close:after {\n    content: '';\n    display: block;\n    box-sizing: border-box;\n    position: absolute;\n    top: 50%;\n    width: 1rem;\n    height: 1px;\n    background: black;\n    transform-origin: center;\n    transition: height 0.2s cubic-bezier(0.25, 0.1, 0.25, 1),\n                background 0.2s cubic-bezier(0.25, 0.1, 0.25, 1);\n  }\n\n  .close:before {\n    -webkit-transform: translate(0, -50%) rotate(45deg);\n    -moz-transform: translate(0, -50%) rotate(45deg);\n    transform: translate(0, -50%) rotate(45deg);\n    left: 0.25rem;\n  }\n\n  .close:after {\n    -webkit-transform: translate(0, -50%) rotate(-45deg);\n    -moz-transform: translate(0, -50%) rotate(-45deg);\n    transform: translate(0, -50%) rotate(-45deg);\n    left: 0.25rem;\n  }\n\n  .close:hover {\n    background: black;\n  }\n\n  .close:hover:before, .close:hover:after {\n    height: 2px;\n    background: white;\n  }\n\n  .close:focus {\n    border-color: #3399ff;\n    box-shadow: 0 0 0 2px #3399ff;\n  }\n\n  .close:active {\n    transform: scale(0.9);\n  }\n\n  .close:hover, .close:focus, .close:active {\n    outline: none;\n  }\n</style>\n\n<svelte:window on:keyup={handleKeyup}/>\n\n{#if Component}\n  <div\n    class=\"bg\"\n    on:click={handleOuterClick}\n    bind:this={background}\n    transition:currentTransitionBg={state.transitionBgProps}\n    style={cssBg}\n  >\n    <div class=\"window-wrap\" bind:this={wrap}>\n      <div\n        class=\"window\"\n        transition:currentTransitionWindow={state.transitionWindowProps}\n        on:introstart={onOpen}\n        on:outrostart={onClose}\n        on:introend={onOpened}\n        on:outroend={onClosed}\n        style={cssWindow}\n      >\n        {#if state.closeButton}\n          <button on:click={close} class=\"close\"></button>\n        {/if}\n        <div class=\"content\" style={cssContent}>\n          <svelte:component this={Component} {...props} />\n        </div>\n      </div>\n    </div>\n  </div>\n{/if}\n<slot></slot>\n",
    "<script lang=\"ts\">import Track from \"./track/Track.svelte\";\nimport GenerationOptions from \"./options/generationOptions/GenerationOptions.svelte\";\nimport TrackControls from \"./track/TrackControls.svelte\";\nimport TreeVis from \"./treeVis/TreeVis.svelte\";\nimport Modal from \"svelte-simple-modal\";\nimport ModalController from \"./modals/ModalController.svelte\";\nimport colorLookup from \"./colors\";\nimport { splitStore, showSidebarStore } from \"./state/settings\";\nimport { togglePlayback } from \"./audio/audioPlayer\";\nimport { undoStore } from \"./state/undo\";\nimport AutoSaveController from \"./persistence/AutoSaveController.svelte\";\nimport DisplayOptions from \"./options/displayOptions/DisplayOptions.svelte\";\nimport TrackInfo from \"./trackInfo/TrackInfo.svelte\";\nimport toCss from \"react-style-object-to-css\";\nfunction keyPressed(event) {\n    if (event.key === \" \") {\n        console.log(event);\n        if (event.target !== null && \"tagName\" in event.target) {\n            const tagName = event.target[\"tagName\"];\n            if (tagName !== \"INPUT\" && tagName !== \"TEXTAREA\") {\n                event.preventDefault();\n                togglePlayback();\n            }\n        }\n    }\n    else if (event.key === \"z\" && event.ctrlKey) {\n        event.preventDefault();\n        undoStore.undo();\n    }\n}\n</script>\n\n<style>\n  .grid {\n    display: grid;\n    grid-template-rows: 1fr 46px;\n    height: 100vh;\n    width: 100vw;\n  }\n\n  :global(body) {\n    padding: 0;\n    margin: 0;\n    width: 100vw;\n    height: 100vh;\n    overflow: hidden;\n    position: fixed;\n  }\n\n  :global(a) {\n    color: #c3e88d;\n  }\n\n  :global(a:active) {\n    color: #c3e88d;\n  }\n\n  :global(a:visited) {\n    color: #c3e88d;\n  }\n</style>\n\n<svelte:body on:keypress={keyPressed} />\n\n<Modal>\n  <AutoSaveController />\n  <ModalController />\n  <div\n    class=\"grid\"\n    style={toCss({\n      color: colorLookup.text,\n      gridTemplateColumns: `${$splitStore}fr ${100 - $splitStore}fr ${\n        $showSidebarStore ? '300px' : ''\n      }`,\n    })}>\n    {#if !$showSidebarStore}\n      <div\n        style={toCss({\n          position: 'fixed',\n          top: 8,\n          right: 8,\n          color: colorLookup.text,\n          fontSize: 20,\n          fontWeight: 600,\n          opacity: 50,\n          cursor: 'pointer',\n          zIndex: 999,\n        })}\n        on:click|capture={() => showSidebarStore.set(true)}>\n        &lt;\n      </div>\n    {/if}\n    <div\n      style={toCss({\n        gridColumn: '1',\n        gridRow: '1',\n        minHeight: 0,\n        display: $splitStore === 0 ? 'none' : 'initial',\n      })}>\n      <Track />\n    </div>\n    <div\n      style={toCss({\n        position: 'relative',\n        gridColumn: '2',\n        gridRow: '1',\n        minHeight: 0,\n        display: $splitStore === 100 ? 'none' : 'initial',\n      })}>\n      <TreeVis />\n    </div>\n    <div\n      style={toCss({ gridColumn: '1 / span 3', gridRow: '2', minHeight: 0 })}>\n      <TrackControls />\n    </div>\n    {#if $showSidebarStore}\n      <div\n        style={toCss({\n          position: 'relative',\n          gridColumn: '3',\n          gridRow: '1',\n          overflowY: 'auto',\n          overflowX: 'hidden',\n          display: 'flex',\n          flexDirection: 'column',\n          backgroundColor: colorLookup.bgDark,\n          borderLeft: `1px solid ${colorLookup.border}`,\n          padding: 12,\n        })}>\n        <div\n          style={toCss({\n            position: 'absolute',\n            top: 8,\n            left: 8,\n            color: colorLookup.text,\n            fontSize: 20,\n            fontWeight: 600,\n            opacity: 50,\n            cursor: 'pointer',\n          })}\n          on:click={() => showSidebarStore.set(false)}>\n          &gt;\n        </div>\n        <h1\n          style={toCss({\n            textAlign: 'center',\n            color: colorLookup.text,\n            margin: 0,\n          })}>\n          Options\n        </h1>\n        <GenerationOptions />\n        <DisplayOptions />\n        <TrackInfo />\n      </div>\n    {/if}\n  </div>\n</Modal>\n",
    "<script lang=\"ts\">import Button from \"../buttons/Button.svelte\";\nimport { getContext } from \"svelte\";\nimport ChangeLogModal from \"./ChangeLogModal.svelte\";\nimport Changelog from \"./Changelog\";\nimport colorLookup, { modalOptions } from \"../colors\";\nimport HelpModal from \"./HelpModal.svelte\";\nimport toCss from \"react-style-object-to-css\";\nconst { open } = getContext(\"simple-modal\");\nfunction openChangelog() {\n    open(ChangeLogModal, {}, modalOptions);\n}\nfunction openHelp() {\n    open(HelpModal, {}, modalOptions);\n}\n</script>\n\n<style>\n  h1 {\n    margin-top: 0;\n  }\n\n  .buttonRow {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n  }\n</style>\n\n<h1 style={toCss({ color: colorLookup.text })}>About</h1>\n<p>\n  MuseTree is a custom front-end for\n  <a href=\"https://openai.com/blog/musenet/\" target=\"_blank\">\n    OpenAi's MuseNet\n  </a>\n  , the AI music generator. The official app is a toy designed to show off the\n  research. In contrast, MuseTree is designed for real music production, and has\n  been built from the ground-up with that in mind.\n</p>\n\n<p>\n  MuseTree is still in active development. I'm very happy to take suggestions,\n  so please open a GitHub issue or comment on an existing one with your ideas!\n  If you want to chat with me in real time, I\n  <a href=\"https://twitch.tv/stevenwaterman\" target=\"_blank\">\n    live-code on twitch.tv\n  </a>\n  Mon-Fri 2-6pm BST. At the minute, those streams are mostly my work on\n  MuseTree, so come along and say hi!\n</p>\n<div class=\"buttonRow\">\n  <Button\n    on:click={() => window.open('https://github.com/stevenwaterman/musetree')}>\n    Source Code\n  </Button>\n  <Button on:click={() => window.open('http://www.stevenwaterman.uk')}>\n    Steven Waterman\n  </Button>\n  <Button on:click={openChangelog}>\n    Changelog - v{Changelog[0].version.join('.')}\n  </Button>\n  <Button on:click={openHelp}>Help</Button>\n</div>\n",
    "<script lang=\"ts\">import changelog from \"./Changelog\";\n</script>\n\n<style>\n  h1 {\n    margin-top: 0;\n  }\n</style>\n\n<div>\n  <h1>ChangeLog</h1>\n\n  {#each changelog as entry}\n    <a\n      href={'https://github.com/stevenwaterman/musetree/tree/' + entry.commitHash}\n      target=\"_blank\">\n      <h2>\n        v{entry.version[0]}.{entry.version[1]}.{entry.version[2]} - {entry.date.toLocaleDateString()}\n      </h2>\n    </a>\n\n    <ul>\n      {#each entry.changes as change}\n        <li>{change}</li>\n      {/each}\n    </ul>\n  {/each}\n</div>\n",
    "<script lang=\"ts\">import colorLookup from \"../colors\";\nimport toCss from \"react-style-object-to-css\";\nconst textColorStyle = { color: colorLookup.text };\n</script>\n\n<style>\n  h1 {\n    margin-top: 0;\n  }\n\n  .subheading {\n    font-size: 10pt;\n    text-align: center;\n  }\n</style>\n\n<h1 style={toCss(textColorStyle)}>MuseTree Help</h1>\n\n<p class=\"subheading\">\n  <i>\n    You can open this window at any time by clicking\n    <b>About</b>\n    , then clicking\n    <b>Help</b>\n  </i>\n</p>\n\n<h2 style={toCss(textColorStyle)}>What is MuseTree?</h2>\n<p>\n  MuseTree lets you work with an AI to generate music in range of styles. It is\n  designed for non-musicians interested in creating music, and small content\n  creators e.g. YouTubers.\n</p>\n\n<h2 style={toCss(textColorStyle)}>Getting Started</h2>\n<p>\n  In the\n  <b>Tree View</b>\n  , right-click the red\n  <b>Root</b>\n  node and select\n  <b>Request More</b>\n  . This asks the AI to generate some music. It can take up to a minute, so be\n  patient.\n</p>\n<p>\n  When you see the four children under the root node, try clicking one to select\n  it. The\n  <b>Track View</b>\n  will display the notes and you will the audio begin to play. Pick your\n  favourite child, and ask the AI to generate a follow-up section, then delete\n  the others.\n</p>\n<p>\n  You can control the AI using the\n  <b>Generation Options</b>\n  on the right-hand side of the screen. Each option has a tooltip explaining\n  what that setting does.\n</p>\n<p>\n  When you are happy with your track, right-click the bottom node and choose\n  <b>Save Audio</b>\n  .\n</p>\n\n<h2 style={toCss(textColorStyle)}>Advanced Tips</h2>\n<p>\n  After right-clicking a node, each option in the context menu has one letter\n  underlined. Rather than clicking the button, you can just press the underline\n  key on your keyboard. This works even if the menu is not open, as long as you\n  are hovering over that node. Other hotkeys are\n  <b>space</b>\n  for play/pause and\n  <b>z</b>\n  for undo.\n</p>\n<p>\n  If all four children of a node are identical, be careful. MuseNet may have\n  started overfitting, and could be generating a real song. Try increasing the\n  <b>Temperature</b>\n  before asking the AI to try again.\n</p>\n<p>\n  There is a\n  <b>Delete All</b>\n  option if you right-click the root node.\n</p>\n<p>\n  You can change the instruments or other settings mid-way through a track and\n  MuseNet will try to seamlessly transition to the new settings.\n</p>\n",
    "<script lang=\"ts\">import colorLookup from \"../colors\";\nimport toCss from \"react-style-object-to-css\";\nexport let disabled = undefined;\nexport let emphasise = undefined;\nexport let style = undefined;\nlet textColor;\n$: textColor = disabled\n    ? colorLookup.buttonBg\n    : emphasise\n        ? colorLookup.textEmphasis\n        : colorLookup.textDark;\nlet bgColor;\n$: bgColor = disabled\n    ? colorLookup.buttonBgDisabled\n    : emphasise\n        ? colorLookup.text\n        : colorLookup.buttonBg;\nlet actualStyle;\n$: actualStyle = { color: textColor, backgroundColor: bgColor, ...(style || {}) };\n</script>\n\n<style>\n  .button {\n    display: inline-block;\n    padding: 0.35em 1.2em;\n    margin: 0.3em;\n    border-radius: 0.12em;\n    box-sizing: border-box;\n    text-align: center;\n    transition: all 0.1s;\n    cursor: pointer;\n  }\n\n  .enabled:hover {\n    background-color: #314549;\n    color: #c3cee3;\n  }\n\n  .enabled {\n    cursor: pointer;\n  }\n\n  .disabled {\n    cursor: default;\n  }\n</style>\n\n{#if disabled}\n  <div class=\"button disabled\" style={toCss(actualStyle)}>\n    <slot />\n  </div>\n{:else}\n  <div class=\"button enabled\" on:click style={toCss(actualStyle)}>\n    <slot />\n  </div>\n{/if}\n",
    "<script lang=\"ts\">import colorLookup from \"../colors\";\nimport toCss from \"react-style-object-to-css\";\nexport let disabled = undefined;\nexport let emphasise = undefined;\nexport let style = undefined;\nexport let fileTypes = \"\";\nexport let handleFile = () => { };\nlet input;\nfunction fileEvent() {\n    const files = input.files;\n    if (files && files.length) {\n        handleFile(files[0]);\n    }\n    input.files = null;\n}\nfunction dropEvent(event) {\n    const dataTransfer = event.dataTransfer;\n    if (dataTransfer !== null) {\n        const files = dataTransfer.files;\n        const file = files.item(0);\n        if (file !== null) {\n            handleFile(file);\n        }\n    }\n}\nlet textColor;\n$: textColor = disabled\n    ? colorLookup.buttonBg\n    : emphasise\n        ? colorLookup.textEmphasis\n        : colorLookup.textDark;\nlet bgColor;\n$: bgColor = disabled\n    ? colorLookup.buttonBgDisabled\n    : emphasise\n        ? colorLookup.text\n        : colorLookup.buttonBg;\n</script>\n\n<style>\n  .button {\n    display: inline-block;\n    padding: 0.35em 1.2em;\n    margin: 0.3em;\n    border-radius: 0.12em;\n    box-sizing: border-box;\n    text-align: center;\n    transition: all 0.1s;\n    cursor: pointer;\n  }\n\n  .enabled:hover {\n    background-color: #314549;\n    color: #c3cee3;\n  }\n\n  .enabled {\n    cursor: pointer;\n  }\n\n  .disabled {\n    cursor: default;\n  }\n\n  .hidden {\n    display: none;\n  }\n</style>\n\n{#if disabled}\n  <label for=\"upload\" class=\"button disabled\">\n    <slot />\n  </label>\n{:else}\n  <div\n    on:dragover|preventDefault|stopPropagation\n    on:drop|preventDefault|stopPropagation={dropEvent}>\n    <label\n      for=\"upload\"\n      class=\"button enabled\"\n      style={toCss({ color: textColor, backgroundColor: bgColor, ...(style || {})})}>\n      <slot />\n      <input\n        id=\"upload\"\n        class=\"hidden\"\n        type=\"file\"\n        bind:this={input}\n        accept={fileTypes}\n        multiple={false}\n        on:input|preventDefault|stopPropagation={fileEvent} />\n    </label>\n  </div>\n{/if}\n",
    "<script lang=\"ts\">import colorLookup from \"../colors\";\n;\nimport toCss from \"react-style-object-to-css\";\nexport let instrument;\nexport let storeMap;\nlet store;\n$: store = storeMap[instrument];\nlet id;\n$: id = \"instrument-\" + instrument;\nfunction toggle() {\n    if (store)\n        store.update((state) => !state);\n}\n</script>\n\n<style>\n  .row{\n    display:flex;\n    flex-direction: row;\n    align-items: center;\n    margin: 4px;\n    padding: 0 8px 0 8px;\n    cursor: pointer;\n  }\n\n  label {\n    margin: 0;\n    pointer-events: none;\n  }\n\n  input {\n    margin: 0 8px 0 0;\n    cursor: pointer;\n  }\n</style>\n\n{#if store}\n<div class=\"row\" style={toCss({border: \"1px solid\", borderColor: colorLookup.border})} on:click={toggle}>\n  <input {id} type=\"checkbox\" bind:checked={$store} />\n  <label for={id} style={toCss({color: colorLookup[instrument]})}>{instrument}</label>\n</div>\n{/if}\n",
    "<script lang=\"ts\">import { yScaleStore, splitStore } from \"../../state/settings\";\nimport { getContext } from \"svelte\";\nimport Button from \"../../buttons/Button.svelte\";\nimport colorLookup, { modalOptions } from \"../../colors\";\nimport DisplayOptionsModal from \"./DisplayOptionsModal.svelte\";\nimport Tooltip from \"../../tooltips/Tooltip.svelte\";\nimport toCss from \"react-style-object-to-css\";\nconst { open } = getContext(\"simple-modal\");\nfunction showAdvancedModal() {\n    open(DisplayOptionsModal, {}, modalOptions);\n}\n</script>\n\n<style>\n  .options {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    margin-top: 12px;\n  }\n\n  .slider {\n    width: 100px;\n  }\n\n  .optionElement {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n\n  label {\n    font-weight: 600;\n    margin: 0 8px 0 0;\n  }\n\n  span {\n    margin: 4px;\n  }\n\n  h1 {\n    margin: 0;\n    text-align: center;\n    font-size: 20pt;\n  }\n\n  input {\n    margin: 0;\n  }\n\n  .row {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n  }\n</style>\n\n<div class=\"options\" style={toCss({color: colorLookup.textDark})}>\n  <div class=\"row\">\n    <h1 style={toCss({ color: colorLookup.text })}>Display</h1>\n    <Button on:click={showAdvancedModal} style={toCss({ fontSize: 10 })}>\n      Advanced\n    </Button>\n  </div>\n\n  <div class=\"optionElement\">\n    <Tooltip>\n      <label for=\"yScale\" slot=\"trigger\">Track Zoom</label>\n      <span>Vertically zoom the track view</span>\n    </Tooltip>\n    <input\n      class=\"slider\"\n      id=\"yScale\"\n      bind:value={$yScaleStore}\n      type=\"range\"\n      min=\"10\"\n      max=\"500\"\n      step=\"10\" />\n    <span>{$yScaleStore}%</span>\n  </div>\n\n  <div class=\"optionElement\">\n    <Tooltip>\n      <label for=\"split\" slot=\"trigger\">View Split</label>\n      <span>\n        How much horizontal space to take up with the track view\n      </span>\n    </Tooltip>\n    <input\n      class=\"slider\"\n      id=\"split\"\n      bind:value={$splitStore}\n      type=\"range\"\n      min=\"0\"\n      max=\"100\"\n      step=\"5\" />\n    <span>{$splitStore}%</span>\n  </div>\n</div>\n",
    "<script lang=\"ts\">import InstrumentCheckbox from \"../InstrumentCheckbox.svelte\";\nimport colorLookup, { instrumentVisibility } from \"../../colors\";\nimport { instruments } from \"../../constants\";\nimport Button from \"../../buttons/Button.svelte\";\nimport Tooltip from \"../../tooltips/Tooltip.svelte\";\nimport toCss from \"react-style-object-to-css\";\nfunction selectAll() {\n    instruments.forEach((instrument) => {\n        instrumentVisibility[instrument].set(true);\n    });\n}\nfunction selectNone() {\n    instruments.forEach((instrument) => {\n        instrumentVisibility[instrument].set(false);\n    });\n}\n</script>\n\n<style>\n  h1 {\n    margin-top: 0;\n  }\n\n  label {\n    font-weight: 600;\n    margin: 0 8px 0 0;\n  }\n\n  span {\n    margin: 4px;\n  }\n\n  .column {\n    display: flex; flex-direction: column\n  }\n\n  .alignStart {\n    align-self: flex-start\n  }\n\n  .row {\n    display: flex; flex-direction: row; flex-wrap: wrap\n  }\n</style>\n\n<h1 style={toCss({color: colorLookup.text})}>Advanced Display Options</h1>\n\n<div class=\"column\">\n  <div class=\"alignStart\">\n    <Tooltip>\n      <label slot=\"trigger\">Show Instruments:</label>\n      <span>\n        Deselecting an instrument will hide it from the track view. The\n        instrument will still play, but you won't see it.\n      </span>\n    </Tooltip>\n  </div>\n  <div class=\"row\">\n    {#each instruments as instrument}\n      <InstrumentCheckbox storeMap={instrumentVisibility} {instrument} />\n    {/each}\n  </div>\n  <div class=\"row\">\n    <Button on:click={selectAll}>Show All</Button>\n    <Button on:click={selectNone}>Hide All</Button>\n  </div>\n</div>\n",
    "<script lang=\"ts\">import { genreStore, generationLengthStore, instrumentStores, } from \"../../state/settings\";\nimport InstrumentCheckbox from \"../InstrumentCheckbox.svelte\";\nimport { instrumentCategories } from \"../../constants\";\nimport { getContext } from \"svelte\";\nimport GenresModal from \"./GenresModal.svelte\";\nimport Button from \"../../buttons/Button.svelte\";\nimport colorLookup, { modalOptions } from \"../../colors\";\nimport GenerationOptionsModal from \"./GenerationOptionsModal.svelte\";\nimport Tooltip from \"../../tooltips/Tooltip.svelte\";\nimport toCss from \"react-style-object-to-css\";\nconst { open } = getContext(\"simple-modal\");\nfunction showGenreModal() {\n    open(GenresModal, {}, modalOptions);\n}\nfunction showAdvancedModal() {\n    open(GenerationOptionsModal, {}, modalOptions);\n}\n</script>\n\n<style>\n  .options {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    margin-top: 12px;\n  }\n\n  .slider {\n    width: 100px;\n  }\n\n  .optionElement {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n\n  label {\n    font-weight: 600;\n    margin: 0 8px 0 0;\n  }\n\n  span {\n    margin: 4px;\n  }\n\n  h1 {\n    margin: 0;\n    text-align: center;\n    font-size: 20pt;\n  }\n\n  input {\n    margin: 0;\n  }\n\n  .row {\n    display: flex; flex-direction: row; align-items: center; justify-content: space-between\n  }\n</style>\n\n<div class=\"options\" style={toCss({color: colorLookup.textDark})}>\n  <div\n    class=\"row\">\n    <h1 style={toCss({color: colorLookup.text})}>Generator</h1>\n    <Button on:click={showAdvancedModal} style=\"font-size: 10pt\">\n      Advanced\n    </Button>\n  </div>\n\n  <div class=\"optionElement\">\n    <Tooltip>\n      <label for=\"genre\" slot=\"trigger\">Genre:</label>\n      <span>The style of music to generate</span>\n    </Tooltip>\n    <span id=\"genre\" style={toCss({color: colorLookup.text})}>\n      {$genreStore[0]}\n    </span>\n    <Button\n      on:click={showGenreModal}\n      style={{fontSize: 24, padding: 0, paddingRight: 4, paddingLeft: 4, margin: 0, marginLeft: 8}}>\n      ⚙\n    </Button>\n  </div>\n\n  <div class=\"optionElement\">\n    <Tooltip>\n      <label for=\"generationlength\" slot=\"trigger\">Length:</label>\n      <span>\n        How many tokens to generate. One note is usually two tokens\n      </span>\n    </Tooltip>\n\n    <input\n      class=\"slider\"\n      id=\"generationLength\"\n      bind:value={$generationLengthStore}\n      type=\"range\"\n      min=\"20\"\n      max=\"1000\"\n      step=\"10\" />\n    <span>{$generationLengthStore}</span>\n  </div>\n\n  <div style=\"align-self: flex-start\">\n    <Tooltip>\n      <label slot=\"trigger\">Instruments:</label>\n      <span>\n        Selecting an instrument gives a strong suggestion to the AI. It might\n        just ignore you, but will try and respect the settings where possible.\n        Results are better if you select instruments that make sense for the\n        selected genre.\n      </span>\n    </Tooltip>\n  </div>\n  <div style=\"display: flex; flex-direction: row; flex-wrap: wrap\">\n    {#each instrumentCategories as instrument}\n      <InstrumentCheckbox storeMap={instrumentStores} {instrument} />\n    {/each}\n  </div>\n</div>\n",
    "<script lang=\"ts\">import { maxResponseLengthStore, temperatureStore, autoRequestStore, } from \"../../state/settings\";\nimport colorLookup from \"../../colors\";\nimport Tooltip from \"../../tooltips/Tooltip.svelte\";\nimport toCss from \"react-style-object-to-css\";\n</script>\n\n<style>\n  h1 {\n    margin-top: 0;\n  }\n\n  .optionElement {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n\n  input {\n    margin: 0;\n  }\n\n  label {\n    font-weight: 600;\n    margin: 0 8px 0 0;\n  }\n</style>\n\n<div style=\"height: 200px\">\n  <h1 style={toCss({color: colorLookup.text})}>Advanced Generation Options</h1>\n\n  <div class=\"optionElement\">\n    <Tooltip>\n      <label for=\"responselength\" slot=\"trigger\">Max Length</label>\n      <span>\n        If the response would have more tokens than this, we reduce the number\n        of tokens that we send to MuseNet. Higher values produce songs with more\n        long-term structure but increase the failure rates of MuseNet. Values\n        below 3000 are known to work.\n      </span>\n    </Tooltip>\n\n    <input\n      class=\"slider\"\n      id=\"responselength\"\n      bind:value={$maxResponseLengthStore}\n      type=\"range\"\n      min=\"500\"\n      max=\"5000\"\n      step=\"100\" />\n    <span>{$maxResponseLengthStore}</span>\n  </div>\n\n  <div class=\"optionElement\">\n    <Tooltip>\n      <label for=\"temperature\" slot=\"trigger\">Temperature:</label>\n      <span>\n        How adventurous the AI is allowed to be. Try increasing temperature if\n        you are stuck in a repeating pattern or if MuseNet starts generating a\n        real song.\n      </span>\n    </Tooltip>\n\n    <input\n      class=\"slider\"\n      id=\"temperature\"\n      bind:value={$temperatureStore}\n      type=\"range\"\n      min=\"0.8\"\n      max=\"1.2\"\n      step=\"0.01\" />\n    <span>{$temperatureStore}</span>\n  </div>\n\n  <div class=\"optionElement\">\n    <Tooltip>\n      <label for=\"autoRequest\" slot=\"trigger\">Auto Request</label>\n      <span>\n        Immediately request more as soon as you select a node for the first time\n      </span>\n    </Tooltip>\n    <input id=\"autoRequest\" type=\"checkbox\" bind:checked={$autoRequestStore} />\n  </div>\n</div>\n",
    "<script lang=\"ts\">import GenreOption from \"./GenreOption.svelte\";\nimport { genres } from \"../../constants\";\n;\nimport colorLookup from \"../../colors\";\nimport Tooltip from \"../../tooltips/Tooltip.svelte\";\nimport toCss from \"react-style-object-to-css\";\nconst simpleGenres = [\n    [\"Chopin\", \"chopin\"],\n    [\"Mozart\", \"mozart\"],\n    [\"Rachmaninoff\", \"rachmaninoff\"],\n    [\"Lady Gaga\", \"ladygaga\"],\n    [\"Country\", \"country\"],\n    [\"Disney\", \"disney\"],\n];\nconst advancedGenres = [\n    [\"Jazz\", \"jazz\"],\n    [\"Bach\", \"bach\"],\n    [\"Beethoven\", \"beethoven\"],\n    [\"Journey\", \"journey\"],\n    [\"The Beatles\", \"thebeatles\"],\n    [\"Video Games\", \"video\"],\n    [\"Broadway\", \"broadway\"],\n    [\"Frank Sinatra\", \"franksinatra\"],\n    [\"Bluegrass\", \"bluegrass\"],\n    [\"Tchaikovsky\", \"tchaikovsky\"],\n];\nconst experimentalExclude = [\n    ...simpleGenres.map((pair) => pair[1]),\n    ...advancedGenres.map((pair) => pair[1]),\n];\nconst experimentalGenres = genres.filter((genre) => !experimentalExclude.includes(genre));\n</script>\n\n<style>\n  h1 {\n    margin-top: 0;\n  }\n\n  h2 {\n    display: inline;\n  }\n\n  .genreContainer {\n    margin-top: 8px;\n    margin-bottom: 12px;\n  }\n</style>\n\n<div>\n  <h1 style={toCss({color: colorLookup.text})}>Genres</h1>\n\n  <Tooltip>\n    <h2 slot=\"trigger\" style={toCss({color: colorLookup.text})}>Simple</h2>\n    <span>\n      These genres are the most reliable\n      <br />\n      They are available in the official MuseNet tool\n    </span>\n  </Tooltip>\n\n  <div class=\"genreContainer\">\n    {#each simpleGenres as [text, genre]}\n      <GenreOption {text} {genre} />\n    {/each}\n  </div>\n\n  <Tooltip>\n    <h2 slot=\"trigger\" style={toCss({color: colorLookup.text})}>Advanced</h2>\n    <span>\n      These genres are reliable\n      <br />\n      They are available in the official MuseNet tool\n      <br />\n      after clicking 'show advanced settings'\n    </span>\n  </Tooltip>\n\n  <div class=\"genreContainer\">\n    {#each advancedGenres as [text, genre]}\n      <GenreOption {text} {genre} />\n    {/each}\n  </div>\n\n  <Tooltip>\n    <h2 slot=\"trigger\" style={toCss({color: colorLookup.text})}>Experimental</h2>\n    <span>\n      These genres are not reliable\n      <br />\n      They are not supported by MuseNet, but usually work\n      <br />\n      Don't be surprised if they sound very strange&#33;\n    </span>\n  </Tooltip>\n\n  <div class=\"genreContainer\">\n    {#each experimentalGenres as genre}\n      <GenreOption text={genre} {genre} />\n    {/each}\n  </div>\n</div>\n",
    "<script lang=\"ts\">import { selectedEncodingStore, selectedBranchStore, } from \"../state/trackTree\";\nimport { downloadMuseTreeAudio, downloadMuseNetAudio, downloadMidiAudio, downloadHighQualityMuseTreeAudio, } from \"./export\";\nimport colorLookup from \"../colors\";\nimport download from \"downloadjs\";\nimport Button from \"../buttons/Button.svelte\";\nimport { encodingToString } from \"../state/encoding\";\n;\n;\nimport { root } from \"../state/trackTree\";\n;\nimport Tooltip from \"../tooltips/Tooltip.svelte\";\n;\nimport toCss from \"react-style-object-to-css\";\nexport let store;\nlet state;\n$: state = $store;\nlet trackEncoding;\n$: trackEncoding = state.encoding;\nlet sectionEncoding;\n$: sectionEncoding = state.section.encoding;\nlet selectedSectionsStore;\n$: selectedSectionsStore = root.selectedSectionsStore;\nlet trackEncodingString;\n$: trackEncodingString = encodingToString(trackEncoding);\nlet sectionEncodingString;\n$: sectionEncodingString = encodingToString(sectionEncoding);\nlet fullTrack = true;\nlet encoding;\n$: encoding = fullTrack ? trackEncodingString : sectionEncodingString;\nlet name = \"MuseTreeExport\";\nlet encodingArea;\nfunction copy() {\n    if (encodingArea) {\n        encodingArea.select();\n        document.execCommand(\"copy\");\n        encodingArea.setSelectionRange(0, 0);\n    }\n}\nconst lighterStyle = {\n    borderColor: colorLookup.border,\n    backgroundColor: colorLookup.bgLight,\n    color: colorLookup.text,\n};\n</script>\n\n<style>\n  h1 {\n    margin-top: 0;\n  }\n\n  h2 {\n    margin-top: 4px;\n    margin-bottom: 4px;\n  }\n\n  .encoding {\n    width: 100%;\n    height: 100px;\n    scrollbar-color: #c3cee3 #1f292e;\n    resize: none;\n    margin: 0;\n  }\n\n  .copy_trigger {\n    position: relative;\n  }\n\n  .copy {\n    display: none;\n    position: absolute;\n    inset: 8px 8px 12px 8px;\n    border-radius: 24px;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .copy_trigger:hover .copy {\n    display: flex;\n  }\n\n  .grid {\n    display: grid;\n    grid-template-columns: 1fr auto;\n    align-items: center;\n    grid-gap: 12px;\n  }\n\n  .leftMargin {\n    margin-left: 12px;\n  }\n\n  .dottedBorder {\n    border: 1px dotted;\n  }\n\n  .row {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    margin-bottom: 12px;\n  }\n</style>\n\n<h1 style={toCss({ color: colorLookup.text })}>Export</h1>\n\n<div class=\"row\">\n  <label for=\"exportName\">File name:</label>\n  <input\n    id=\"exportName\"\n    bind:value={name}\n    type=\"text\"\n    class={['leftMargin', 'dottedBorder'].join(\" \")}\n    style={toCss({ marginBottom: 0, ...lighterStyle })} />\n\n  <Tooltip>\n    <label slot=\"trigger\" class=\"leftMargin\">Encoding:</label>\n    <span>\n      Export the whole track up until that point, or just the one section you\n      clicked?\n    </span>\n  </Tooltip>\n  <Button\n    on:click={() => {\n      fullTrack = true;\n    }}\n    emphasise={fullTrack}>\n    Track\n  </Button>\n  <Button\n    on:click={() => {\n      fullTrack = false;\n    }}\n    emphasise={!fullTrack}>\n    Section\n  </Button>\n</div>\n\n<label for=\"encoding\" style=\"display: none\">Encoding</label>\n<div class=\"copy_trigger\">\n  <textarea\n    bind:this={encodingArea}\n    id=\"encoding\"\n    class={['dottedBorder'].join(\" \")}\n    readonly\n    style={toCss({...lighterStyle, width: \"100%\", resize: \"none\"})}>{encoding}</textarea>\n  <div\n    class=\"copy\"\n    style={toCss({color: colorLookup.text , backgroundColor: colorLookup.bgDark + '99'})}\n    on:click={copy}>\n    Click to copy\n  </div>\n</div>\n\n<h2 style={toCss({ color: colorLookup.text })}>Export as:</h2>\n\n<div class=\"grid\">\n  <span>\n    <b style={toCss({ color: colorLookup.text })}>Recommended:</b>\n    Audio as it sounds elsewhere in the app, re-rendered as one section to prevent issues on section boundaries\n  </span>\n  <Button on:click={() => downloadHighQualityMuseTreeAudio($selectedSectionsStore, name)}>\n    MuseTree (High Quality .wav)\n  </Button>\n\n  <span>\n    Audio as it sounds elsewhere in the app\n  </span>\n  <Button on:click={() => downloadMuseTreeAudio($selectedSectionsStore, name)}>\n    MuseTree (Fast Render .wav)\n  </Button>\n\n  <span>\n    Request the audio from MuseNet - as it would sound in the official MuseNet\n    tool. Less synth-y than the MuseTree export, but it can take a minute to\n    respond\n  </span>\n  <div style=\"display: flex; flex-direction: column\">\n    <Button\n      on:click={() => {\n        const encoding = $selectedEncodingStore;\n        if (encoding !== null) {\n          downloadMuseNetAudio(encoding, 'wav', name);\n        }\n      }}>\n      MuseNet (.wav)\n    </Button>\n    <Button\n      on:click={() => {\n        const encoding = $selectedEncodingStore;\n        if (encoding !== null) {\n          downloadMuseNetAudio(encoding, 'mp3', name);\n        }\n      }}>\n      MuseNet (.mp3)\n    </Button>\n    <Button\n      on:click={() => {\n        const encoding = $selectedEncodingStore;\n        if (encoding !== null) {\n          downloadMuseNetAudio(encoding, 'ogg', name);\n        }\n      }}>\n      MuseNet (.ogg)\n    </Button>\n  </div>\n\n  <span>Midi file for editing in other software:</span>\n  <Button\n    on:click={() => {\n      const encoding = $selectedEncodingStore;\n      if (encoding !== null) {\n        downloadMidiAudio(encoding, name);\n      }\n    }}>\n    Midi\n  </Button>\n\n  <span>Text file containing the encoding as seen in the box above:</span>\n  <Button\n    on:click={() => {\n      const encoding = $selectedEncodingStore;\n      if (encoding !== null) {\n        download(encodingToString(encoding), name + '.txt');\n      }\n    }}>\n    Encoding\n  </Button>\n\n  <span>\n    Log info about the current track to the browser console for debugging\n  </span>\n  <Button\n    on:click={() => {\n      const branch = $selectedBranchStore;\n      if (branch !== null) {\n        console.log(JSON.stringify(branch.section));\n      }\n    }}>\n    Log\n  </Button>\n</div>\n",
    "<script lang=\"ts\">import { getContext } from \"svelte\";\nimport Button from \"../buttons/Button.svelte\";\nimport FileInput from \"../buttons/FileInput.svelte\";\nimport { fromMidi } from \"musenet-midi\";\nimport { encodingToArray, encodingToString } from \"../state/encoding\";\n;\nimport { toReadableNodeState } from \"../state/trackTree\";\n;\nimport { loadMidi } from \"./persistence\";\nimport colorLookup from \"../colors\";\nimport examples from \"./examples\";\n;\n;\nimport toCss from \"react-style-object-to-css\";\nconst { close } = getContext(\"simple-modal\");\nexport let importUnderStore;\nlet importUnderStoreConverted;\n$: importUnderStoreConverted = toReadableNodeState(importUnderStore);\nlet importUnderState;\n$: importUnderState = $importUnderStoreConverted;\nlet section;\n$: section =\n    importUnderState.type === \"root\" ? null : importUnderState.section;\nlet sectionStartsAt;\n$: sectionStartsAt = section === null ? 0 : section.startsAt;\nlet sectionEndsAt;\n$: sectionEndsAt = section === null ? 0 : section.endsAt;\nlet encoding = \"\";\nlet encodingArray;\n$: encodingArray = encodingToArray(encoding.trim());\nlet encodingInvalid;\n$: encodingInvalid = encodingArray.some(isNaN);\nasync function midiSelected(file) {\n    const encodingArray = await fromMidi(file);\n    encoding = encodingToString(encodingArray);\n}\nasync function importEncoding() {\n    close();\n    await loadMidi(encodingArray, sectionStartsAt, sectionEndsAt, importUnderStore);\n}\nconst lighterStyle = {\n    backgroundColor: colorLookup.bgLight,\n    borderColor: colorLookup.border,\n    color: colorLookup.text,\n};\n</script>\n\n<style>\n  h1 {\n    margin-top: 0;\n  }\n\n  .row {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  }\n\n  .encoding {\n    width: 100%;\n    height: 300px;\n    scrollbar-color: #c3cee3 #1f292e;\n    resize: none;\n    margin: 0;\n  }\n\n  .encoding::-webkit-scrollbar {\n    width: 10px;\n  }\n\n  .encoding::-webkit-scrollbar-track {\n    background: #1f292e;\n  }\n\n  .encoding::-webkit-scrollbar-thumb {\n    background-color: #c3cee3;\n  }\n\n  .spread {\n    flex-grow: 1;\n  }\n</style>\n\n<!--TODO provide a guide like MrCheeze's-->\n<h1 style={toCss({ color: colorLookup.text })}>Import</h1>\n\n<div class=\"row\">\n  <span class=\"spread\">What to import:</span>\n  <div class=\"spread\">\n    <FileInput fileTypes=\".mid\" handleFile={midiSelected}>\n      Upload Midi\n    </FileInput>\n  </div>\n  <div class=\"spread row\">\n    <label for=\"example\" style=\"margin-right: 12px;\">Examples:</label>\n    <select\n      id=\"example\"\n      bind:value={encoding}\n      style={toCss({ margin: 0, width: 200, ...lighterStyle })}>\n      <option selected />\n      {#each Object.entries(examples) as [name, exampleEncoding]}\n        <option value={exampleEncoding}>{name}</option>\n      {/each}\n    </select>\n  </div>\n</div>\n\n<label for=\"encoding\" style=\"display: none\">Encoding</label>\n<textarea\n  id=\"encoding\"\n  class=\"encoding\"\n  bind:value={encoding}\n  on:drop|preventDefault={(event) => event.dataTransfer && midiSelected(event.dataTransfer.files[0])}\n  placeholder=\"MuseNet Encoding\"\n  style={toCss({ border: '1px dotted', ...lighterStyle })} />\n\n<Button disabled={encodingInvalid} on:click={importEncoding}>Import</Button>\n",
    "<script lang=\"ts\">import colorLookup from \"../colors\";\nimport { loadingProgressStore } from \"./persistence\";\n;\nimport toCss from \"react-style-object-to-css\";\nlet loadingState;\n$: loadingState = $loadingProgressStore;\nlet done;\n$: done = loadingState === null ? 0 : loadingState.done;\nlet total;\n$: total = loadingState === null ? 0 : loadingState.total;\nlet percent;\n$: percent = (100 * (done || 0)) / (total || 1);\n</script>\n\n<style>\n  .backdrop {\n    position: relative;\n    width: 200px;\n    height: 40px;\n    border-radius: 4px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .bar {\n    border-radius: 4px;\n    height: 100%;\n    transition: width 0.2s ease-in-out;\n  }\n\n  .textContainer {\n    position: absolute;\n    inset: 0;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  }\n\n  span {\n    text-align: center;\n  }\n</style>\n\n<div class=\"backdrop\" style={toCss({backgroundColor: colorLookup.loadingBarBG})}>\n  {#if loadingState}\n    <div class=\"textContainer\" style={toCss({color: colorLookup.loadingBarText})}>\n      <span>{done.toLocaleString()} / {total.toLocaleString()}</span>\n      <span>({percent.toFixed(0)}%)</span>\n    </div>\n  {/if}\n  <div\n    class=\"bar\"\n    style={toCss({backgroundColor: colorLookup.loadingBarFG, width: percent + \"%\"})} />\n</div>\n",
    "<script lang=\"ts\">import { cancelLoading } from \"./persistence\";\nimport Button from \"../buttons/Button.svelte\";\nimport LoadingProgressBar from \"./LoadingProgressBar.svelte\";\nexport let cancelled = false;\nfunction cancel() {\n    cancelLoading();\n    cancelled = true;\n}\n</script>\n\n<style>\n  .center {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n  }\n\n  .column {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .loadingText {\n    text-align: center;\n    margin: 4px;\n  }\n\n  .lds-spinner {\n    display: inline-block;\n    position: relative;\n    width: 80px;\n    height: 80px;\n  }\n\n  .lds-spinner div {\n    transform-origin: 40px 40px;\n    animation: lds-spinner 1.2s linear infinite;\n  }\n\n  .lds-spinner div:after {\n    content: \" \";\n    display: block;\n    position: absolute;\n    top: 3px;\n    left: 37px;\n    width: 6px;\n    height: 18px;\n    border-radius: 20%;\n    background: #c3cee3;\n  }\n\n  .lds-spinner div:nth-child(1) {\n    transform: rotate(0deg);\n    animation-delay: -1.1s;\n  }\n\n  .lds-spinner div:nth-child(2) {\n    transform: rotate(30deg);\n    animation-delay: -1s;\n  }\n\n  .lds-spinner div:nth-child(3) {\n    transform: rotate(60deg);\n    animation-delay: -0.9s;\n  }\n\n  .lds-spinner div:nth-child(4) {\n    transform: rotate(90deg);\n    animation-delay: -0.8s;\n  }\n\n  .lds-spinner div:nth-child(5) {\n    transform: rotate(120deg);\n    animation-delay: -0.7s;\n  }\n\n  .lds-spinner div:nth-child(6) {\n    transform: rotate(150deg);\n    animation-delay: -0.6s;\n  }\n\n  .lds-spinner div:nth-child(7) {\n    transform: rotate(180deg);\n    animation-delay: -0.5s;\n  }\n\n  .lds-spinner div:nth-child(8) {\n    transform: rotate(210deg);\n    animation-delay: -0.4s;\n  }\n\n  .lds-spinner div:nth-child(9) {\n    transform: rotate(240deg);\n    animation-delay: -0.3s;\n  }\n\n  .lds-spinner div:nth-child(10) {\n    transform: rotate(270deg);\n    animation-delay: -0.2s;\n  }\n\n  .lds-spinner div:nth-child(11) {\n    transform: rotate(300deg);\n    animation-delay: -0.1s;\n  }\n\n  .lds-spinner div:nth-child(12) {\n    transform: rotate(330deg);\n    animation-delay: 0s;\n  }\n\n  .flip {\n    transform: scaleX(-1);\n  }\n\n  @keyframes lds-spinner {\n    0% {\n      opacity: 1;\n    }\n    100% {\n      opacity: 0;\n    }\n  }\n</style>\n\n<div class=\"center\">\n  <div class=\"column\">\n    <div class=\"lds-spinner\" class:flip={cancelled}>\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n      <div />\n    </div>\n    {#if cancelled}\n      <p class=\"loadingText\">Reverting</p>\n    {:else}\n      <p class=\"loadingText\">Loading</p>\n      <Button on:click={cancel}>Cancel</Button>\n      <LoadingProgressBar />\n    {/if}\n  </div>\n</div>\n",
    "<script lang=\"ts\">import colorLookup from \"../colors\";\nimport toCss from \"react-style-object-to-css\";\nconst textStyle = {\n    border: \"1px solid\",\n    borderColor: colorLookup.border,\n    backgroundColor: colorLookup.bgLight,\n    color: colorLookup.textDark\n};\n</script>\n\n<style>\n  .TT_text {\n    visibility: hidden;\n    padding: 5px;\n    font-weight: 400;\n    font-size: 12px;\n    margin-left: 12px;\n    pointer-events: none;\n\n    position: absolute;\n    z-index: 1;\n  }\n\n  .TT_trigger:hover .TT_text {\n    visibility: visible;\n  }\n</style>\n\n<div>\n  <div class=\"TT_trigger\">\n    <slot name=\"trigger\" />\n    <div class=\"TT_text\" style={toCss(textStyle)}>\n      <slot />\n    </div>\n  </div>\n</div>\n",
    "<script lang=\"ts\">;\nimport { yScaleStore } from \"../state/settings\";\nimport { instruments } from \"../constants\";\n;\nimport * as Audio from \"../audio/audioPlayer\";\nimport colorLookup, { allInstrumentsVisibility } from \"../colors\";\nimport VisibilityGuard from \"./VisibilityGuard.svelte\";\n;\nimport toCss from \"react-style-object-to-css\";\n;\nexport let viewport;\nexport let section;\nexport let pitchMin;\nexport let pitchMax;\nlet pitchRange;\n$: pitchRange = pitchMax - pitchMin;\nlet startsAt;\n$: startsAt = section ? section.startsAt : null;\nlet sectionDuration;\n$: sectionDuration =\n    section !== null && startsAt !== null ? section.endsAt - startsAt : 0;\nlet height;\n$: height = sectionDuration * $yScaleStore;\nlet top;\n$: top = (startsAt || 0) * $yScaleStore;\nlet notes;\n$: notes = section ? section.notes : null;\nlet activeNotes;\n$: activeNotes = section ? section.activeNotesAtEnd : null;\nlet incompleteNoteEntries;\n$: incompleteNoteEntries = activeNotes\n    ? Object.entries(activeNotes).map(([instrument, pitchMap]) => [\n        instrument,\n        Object.values(pitchMap),\n    ])\n    : null;\nlet completeNoteEntries;\n$: completeNoteEntries = notes\n    ? Object.entries(notes)\n    : null;\nfunction play(event) {\n    const rect = event.target.getBoundingClientRect();\n    const y = event.clientY - rect.top;\n    const fraction = y / height;\n    const addDuration = sectionDuration * fraction;\n    const totalDuration = section.startsAt + addDuration;\n    Audio.play(totalDuration);\n}\nlet svgStyle;\n$: svgStyle = toCss({ backgroundColor: colorLookup.bgLight });\n</script>\n\n<style>\n  .sectionCanvas {\n    position: relative;\n    cursor: pointer;\n  }\n\n  .sectionContainer {\n    width: 100%;\n    position: absolute;\n    box-sizing: border-box;\n    flex-shrink: 0;\n    flex-grow: 0;\n    left: 0;\n  }\n\n  .borders {\n    border-right: 1px solid;\n    border-bottom: 1px solid;\n  }\n</style>\n\n{#if notes !== null}\n  <div\n    class={['sectionContainer', 'borders'].join(' ')}\n    style={toCss({ borderColor: colorLookup.border, height, top })}>\n    <VisibilityGuard root={viewport} let:loaded>\n      {#if loaded}\n        <svg\n          viewBox={`${pitchMin} 0 ${pitchRange + 2} ${sectionDuration}`}\n          width=\"100%\"\n          height={Math.floor(height - 1)}\n          style={svgStyle}\n          class=\"sectionCanvas\"\n          preserveAspectRatio=\"none\"\n          on:click={play}>\n          {#if completeNoteEntries !== null}\n            {#each completeNoteEntries as [instrument, instrumentNotes], idx}\n              {#if $allInstrumentsVisibility[instrument]}\n                {#each instrumentNotes as note}\n                  <rect\n                    x={note.pitch + idx / instruments.length}\n                    width=\"1\"\n                    y={note.startTime}\n                    height={note.endTime - note.startTime}\n                    fill={colorLookup[instrument]}\n                    stroke={colorLookup.border}\n                    stroke-width=\"1px\"\n                    vector-effect=\"non-scaling-stroke\" />\n                {/each}\n              {/if}\n            {/each}\n          {/if}\n          {#if incompleteNoteEntries !== null}\n            {#each incompleteNoteEntries as [instrument, instrumentNotes], idx}\n              {#if $allInstrumentsVisibility[instrument]}\n                {#each instrumentNotes as note}\n                  <rect\n                    x={note.pitch + idx / instruments.length}\n                    width=\"1\"\n                    y={note.startTime}\n                    height={1 * 1000 * 1000}\n                    fill={colorLookup[instrument]}\n                    stroke={colorLookup.border}\n                    stroke-width=\"1px\"\n                    vector-effect=\"non-scaling-stroke\" />\n                {/each}\n              {/if}\n            {/each}\n          {/if}\n        </svg>\n      {/if}\n    </VisibilityGuard>\n  </div>\n{/if}\n",
    "<script lang=\"ts\">import { audioStatusStore } from \"../audio/audioPlayer\";\n;\nimport { yScaleStore, autoScrollStore, isScrollingStore, } from \"../state/settings\";\nimport { create_in_transition } from \"svelte/internal\";\nfunction traverse(node, { offset: startTime, duration: endTime }) {\n    const transTime = endTime - startTime;\n    const style = node.style;\n    return {\n        duration: transTime * 1000,\n        tick: (t) => {\n            const startPx = startTime * $yScaleStore;\n            const endPx = endTime * $yScaleStore;\n            const transPx = endPx - startPx;\n            const y = startPx + t * transPx;\n            style.top = `${y}px`;\n            if ($isScrollingStore) {\n                node.scrollIntoView({\n                    block: \"center\",\n                });\n            }\n        },\n    };\n}\nlet element;\nlet transition;\nlet hidden = true;\naudioStatusStore.subscribe((status) => {\n    if (transition)\n        transition.end();\n    hidden = status.type !== \"on\";\n    if (!hidden && element) {\n        isScrollingStore.set($autoScrollStore);\n        transition = create_in_transition(element, traverse, status);\n        transition.start();\n    }\n});\n</script>\n\n<style>\n  .anchor {\n    position: relative;\n    top: 0;\n    height: 0;\n    width: 100%;\n    z-index: 2;\n    pointer-events: none;\n  }\n\n  .line {\n    position: absolute;\n    height: 2px;\n    width: 100%;\n    z-index: 2;\n    background-color: rgba(255, 255, 255, 0.5);\n    pointer-events: none;\n    margin: 0 -1.5px;\n  }\n</style>\n\n<div\n  bind:this={element}\n  on:introend={() => {\n    hidden = true;\n  }}\n  class=\"anchor\">\n  <div class=\"line\" {hidden} />\n</div>\n",
    "<script lang=\"ts\">import SectionCanvas from \"./SectionCanvas.svelte\";\nimport { isScrollingStore, yScaleStore } from \"../state/settings\";\nimport { root } from \"../state/trackTree\";\nimport Timeline from \"./Timeline.svelte\";\nimport colorLookup from \"../colors\";\nimport { getPitchRange } from \"./pitches\";\n;\n;\nimport toCss from \"react-style-object-to-css\";\nlet selectedSectionsStore;\n$: selectedSectionsStore = root.selectedSectionsStore;\nlet selectedSections;\n$: selectedSections = $selectedSectionsStore;\nlet pitchRange;\n$: pitchRange = getPitchRange(selectedSections);\nlet viewport;\nfunction scroll(sections) {\n    if (sections && sections.length) {\n        const lastSection = sections[sections.length - 1];\n        const startsAt = lastSection.startsAt;\n        setTimeout(() => {\n            if (viewport)\n                viewport.scrollTop = startsAt * $yScaleStore;\n        }, 0);\n    }\n}\n$: scroll(selectedSections);\n</script>\n\n<style>\n  .container {\n    position: relative;\n    overflow-y: scroll;\n    scrollbar-color: #c3cee3 #1f292e;\n    height: 100%;\n  }\n\n  .container::-webkit-scrollbar {\n    width: 10px;\n  }\n\n  .container::-webkit-scrollbar-track {\n    background: #1f292e;\n  }\n\n  .container::-webkit-scrollbar-thumb {\n    background-color: #c3cee3;\n  }\n\n  .placeholder {\n    text-align: center;\n  }\n</style>\n\n<div\n  class=\"container\"\n  bind:this={viewport}\n  on:wheel={() => isScrollingStore.set(false)}\n  style={toCss({backgroundColor: colorLookup.bgDark})}>\n  <Timeline />\n  {#each selectedSections as section}\n    {#if viewport !== undefined}\n      <SectionCanvas\n        {viewport}\n        {section}\n        pitchMin={pitchRange.minPitch}\n        pitchMax={pitchRange.maxPitch} />\n    {/if}\n  {:else}\n    <p class=\"placeholder\">Right click the root to begin</p>\n  {/each}\n\n</div>\n",
    "<script lang=\"ts\">import { preplayStore, autoScrollStore, autoPlayStore, } from \"../state/settings\";\nimport { play, stop, audioStatusStore } from \"../audio/audioPlayer\";\nimport Button from \"../buttons/Button.svelte\";\nimport colorLookup from \"../colors\";\nimport AboutModalButton from \"../about/AboutModalButton.svelte\";\nimport FileInput from \"../buttons/FileInput.svelte\";\nimport { root } from \"../state/trackTree\";\nimport { save, load } from \"../persistence/persistence\";\nimport { undoStore } from \"../state/undo\";\nimport Tooltip from \"../tooltips/Tooltip.svelte\";\nimport toCss from \"react-style-object-to-css\";\nconst reader = new FileReader();\nreader.onload = () => {\n    const result = reader.result;\n    if (result !== null)\n        load(root, result);\n};\nfunction loadClicked(file) {\n    reader.readAsText(file);\n}\nlet disallowSave;\n$: disallowSave = Object.keys($root.children).length === 0;\n</script>\n\n<style>\n  .container {\n    height: 100%;\n    display: flex;\n    flex-direction: row;\n  }\n\n  .col {\n    display: flex;\n    flex-direction: column;\n  }\n\n  .center {\n    justify-content: center;\n    text-align: center;\n    align-items: center;\n  }\n\n  .margin {\n    margin: 0 8px;\n  }\n\n  .slider {\n    width: 100px;\n  }\n\n  .playStop {\n    width: 25px;\n    font-size: 24pt;\n    cursor: pointer;\n    margin-right: 12px;\n    margin-top: -5px;\n  }\n</style>\n\n<div\n  class=\"container center\"\n  style={toCss({ color: colorLookup.textDark, borderTop: '1px solid', borderColor: colorLookup.border, backgroundColor: colorLookup.bgDark })}>\n  {#if $audioStatusStore.type === 'on'}\n    <div class=\"playStop\" on:click={stop} style={toCss({color: colorLookup.text})}>\n      ■\n    </div>\n  {:else if $audioStatusStore.type === 'loading'}\n    <div class=\"playStop\" style={toCss({color: colorLookup.text, cursor: \"default\"})}>\n      ▶\n    </div>\n  {:else}\n    <div\n      class=\"playStop\"\n      on:click={() => play(0)}\n      style={toCss({color: colorLookup.text})}>\n      ▶\n    </div>\n  {/if}\n\n  <div class=\"col center margin\">\n    <Tooltip>\n      <label for=\"autoScroll\" slot=\"trigger\">Auto Scroll</label>\n      <span>\n        Scroll the track to show the part that is playing\n      </span>\n    </Tooltip>\n    <input id=\"autoScroll\" type=\"checkbox\" bind:checked={$autoScrollStore} />\n  </div>\n\n  <div class=\"col center margin\">\n    <Tooltip>\n      <label for=\"autoPlay\" slot=\"trigger\">Auto Play</label>\n      <span>\n        Start playing the audio when a new node is selected\n      </span>\n    </Tooltip>\n    <input id=\"autoPlay\" type=\"checkbox\" bind:checked={$autoPlayStore} />\n  </div>\n\n  <div class=\"col margin\">\n    <Tooltip>\n      <label for=\"preplay\" slot=\"trigger\">Pre-Play: {$preplayStore}s</label>\n      <span>\n        When a section auto-plays, how many seconds of the previous section\n        should we play first?\n      </span>\n    </Tooltip>\n    <input\n      class=\"slider\"\n      id=\"preplay\"\n      bind:value={$preplayStore}\n      type=\"range\"\n      min=\"0\"\n      max=\"5\"\n      step=\"0.5\" />\n  </div>\n\n  <Button disabled={$undoStore.length === 0} on:click={undoStore.undo}>\n    Undo (ctrl + z)\n  </Button>\n\n  <FileInput fileTypes=\".mst\" handleFile={loadClicked}>Load</FileInput>\n  <Button disabled={disallowSave} on:click={() => save(root)}>Save</Button>\n\n  <AboutModalButton />\n</div>\n",
    "<script lang=\"ts\">import { onDestroy, onMount } from \"svelte\";\nexport let root;\nlet element;\nlet observer;\nlet loaded = false;\nlet observing = false;\nonMount(() => {\n    if (element) {\n        observer = new IntersectionObserver((entries) => {\n            loaded = loaded || entries.some((entry) => entry.isIntersecting);\n            if (loaded)\n                stopObserving();\n        }, {\n            rootMargin: \"100px\",\n            root: root,\n            threshold: 0,\n        });\n        observer.observe(element);\n        observing = true;\n    }\n});\nonDestroy(() => {\n    if (observing)\n        stopObserving();\n});\nfunction stopObserving() {\n    if (observer && element) {\n        observer.unobserve(element);\n        observing = false;\n    }\n}\n</script>\n\n<style>\n  .guard {\n    position: relative;\n    height: 100%;\n  }\n</style>\n\n<div bind:this={element} class=\"guard\">\n  <slot {loaded} />\n</div>\n",
    "<script lang=\"ts\">import { root } from \"../state/trackTree\";\nimport colorLookup from \"../colors\";\nimport { getInstrumentPrevalences, getMaxSilence, getNumberOfNotes, getNumberOfTokens, getSilences, } from \"./stats\";\nimport { getPitchRange } from \"../track/pitches\";\nimport Button from \"../buttons/Button.svelte\";\nimport Tooltip from \"../tooltips/Tooltip.svelte\";\n;\n;\n;\nimport toCss from \"react-style-object-to-css\";\nlet selectedSectionsStore;\n$: selectedSectionsStore = root.selectedSectionsStore;\nlet selectedSections;\n$: selectedSections = $selectedSectionsStore;\nlet useTrack = true;\nfunction selectTrack() {\n    useTrack = true;\n}\nfunction selectSection() {\n    useTrack = false;\n}\nlet sections;\n$: sections =\n    selectedSections === null\n        ? null\n        : selectedSections.length === 0\n            ? null\n            : useTrack\n                ? selectedSections\n                : [selectedSections[selectedSections.length - 1]];\nlet startsAt;\n$: startsAt = sections === null ? null : sections[0].startsAt;\nlet endsAt;\n$: endsAt = sections === null ? null : sections[sections.length - 1].endsAt;\nlet songLength;\n$: songLength = startsAt !== null && endsAt !== null ? (endsAt - startsAt).toFixed(1) : \"0.0\";\nlet numberOfTokens;\n$: numberOfTokens = sections ? getNumberOfTokens(sections) : null;\nlet numberOfNotes;\n$: numberOfNotes = sections ? getNumberOfNotes(sections) : null;\nlet pitchRange;\n$: pitchRange = sections === null ? null : getPitchRange(sections);\nlet silences;\n$: silences = sections === null ? null : getSilences(sections);\nlet maxSilence;\n$: maxSilence = silences === null ? null : getMaxSilence(silences);\nlet maxSilenceSeconds;\n$: maxSilenceSeconds =\n    maxSilence === null\n        ? \"0\"\n        : (maxSilence.endTime - maxSilence.startTime).toFixed(1);\nlet instrumentPrevalences;\n$: instrumentPrevalences =\n    sections === null ? null : getInstrumentPrevalences(sections);\nlet instrumentBars;\n$: instrumentBars =\n    instrumentPrevalences === null\n        ? null\n        : Object.entries(instrumentPrevalences);\n</script>\n\n<style>\n  h1 {\n    text-align: center;\n    margin: 12px 0 0 0;\n  }\n\n  .mainCol {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n  }\n\n  .col {\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n  }\n\n  .row {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n  }\n\n  .label {\n    font-weight: 600;\n  }\n\n  .value {\n    text-align: right;\n  }\n\n  .instrumentBar {\n    display: flex;\n    flex-direction: row;\n    height: 10px;\n    flex-grow: 1;\n  }\n\n  .spacer {\n    height: 12px;\n  }\n</style>\n\n<h1>Stats</h1>\n\n{#if sections === null}\n  <span style={toCss({margin: \"12px auto 0 auto\", color: colorLookup.textDark})}>\n    Nothing Selected\n  </span>\n{:else}\n  <div class=\"row\" style=\"justify-content: space-around\">\n    <Button on:click={selectTrack} emphasise={useTrack} style=\"font-size: 10pt\">\n      Track\n    </Button>\n    <Button\n      on:click={selectSection}\n      emphasise={!useTrack}\n      style=\"font-size: 10pt\">\n      Section\n    </Button>\n  </div>\n\n  <div class=\"mainCol\" style={toCss({color: colorLookup.textDark})}>\n    <div class=\"row\">\n      <span class=\"label\">Length:</span>\n      <div class=\"col\">\n        <span class=\"value\">{numberOfTokens} tokens</span>\n        <span class=\"value\">{numberOfNotes} notes</span>\n        <span class=\"value\">{songLength} sec</span>\n      </div>\n    </div>\n\n    <div class=\"spacer\" />\n\n    <div class=\"row\">\n      <span class=\"label\">Pitch:</span>\n      {#if pitchRange !== null && pitchRange.minPitch !== -1}\n        <span class=\"value\">{pitchRange.minPitch} - {pitchRange.maxPitch}</span>\n      {/if}\n    </div>\n\n    <div class=\"spacer\" />\n\n    <div class=\"row\">\n      <span class=\"label\">Max Silence:</span>\n      <span class=\"value\">{maxSilenceSeconds} sec</span>\n    </div>\n\n    <div class=\"spacer\" />\n\n    <div class=\"row\" style=\"justify-content: center\">\n      <span class=\"label\" style={toCss({color: colorLookup.text})}>\n        Instrument Use\n      </span>\n    </div>\n\n    <div\n      style=\"display: grid; grid-template-columns: auto 1fr; align-items:\n      center; grid-column-gap: 12px\">\n      <Tooltip>\n        <span class=\"label\" slot=\"trigger\">Note Count:</span>\n        <span>\n          Based on the number of notes for that instrument\n        </span>\n      </Tooltip>\n\n      <div class=\"instrumentBar\">\n        {#if instrumentBars}\n          {#each instrumentBars as [instrument, values]}\n            {#if values['noteCount'] > 0}\n              <div\n                class=\"bar\"\n                style={toCss({backgroundColor: colorLookup[instrument], flexGrow: values['noteCount']})} />\n            {/if}\n          {/each}\n        {/if}\n      </div>\n\n      <Tooltip>\n        <span class=\"label\" slot=\"trigger\">Note Length:</span>\n        <span>\n          Based on the total length of all notes for that instrument\n        </span>\n      </Tooltip>\n      <div class=\"instrumentBar\">\n        {#if instrumentBars}\n          {#each instrumentBars as [instrument, values]}\n            {#if values['totalPlayingTime'] > 0}\n              <div\n                class=\"bar\"\n                style={toCss({backgroundColor: colorLookup[instrument], flexGrow: values['totalPlayingTime'] * 1000})} />\n            {/if}\n          {/each}\n        {/if}\n      </div>\n\n      <Tooltip>\n        <span class=\"label\" slot=\"trigger\">Active Time:</span>\n        <span>\n          Based on how much of the time that instrument is making noise\n        </span>\n      </Tooltip>\n      <div class=\"instrumentBar\">\n        {#if instrumentBars}\n          {#each instrumentBars as [instrument, values]}\n            {#if values['nonSilenceTime'] > 0}\n              <div\n                class=\"bar\"\n                style={toCss({backgroundColor: colorLookup[instrument], flexGrow: values['nonSilenceTime'] * 1000})} />\n            {/if}\n          {/each}\n        {/if}\n      </div>\n    </div>\n  </div>\n{/if}\n",
    "<script lang=\"ts\">import { contextModalStore } from \"./ContextModalStore\";\n;\nimport { getContext, afterUpdate } from \"svelte\";\nimport ImportModal from \"../persistence/ImportModal.svelte\";\nimport ExportModal from \"../persistence/ExportModal.svelte\";\nimport Button from \"../buttons/Button.svelte\";\nimport { configStore } from \"../state/settings\";\nimport colorLookup, { modalOptions } from \"../colors\";\nimport { request } from \"../bridge/broker\";\nimport DeleteConfirmationModal from \"./DeleteConfirmationModal.svelte\";\nimport { toReadableNodeState } from \"../state/trackTree\";\n;\n;\nimport toCss from \"react-style-object-to-css\";\nlet contextModalState;\n$: contextModalState = $contextModalStore;\nlet coordinates;\n$: coordinates =\n    contextModalState === null ? null : contextModalState.coordinates;\nlet left;\n$: left = coordinates === null ? null : coordinates[0] - 40;\nlet top;\n$: top = coordinates === null ? null : coordinates[1] - 40;\nlet showRoot;\n$: showRoot =\n    contextModalState !== null && contextModalState.stores.type === \"root\";\nlet showBranch;\n$: showBranch =\n    contextModalState !== null && contextModalState.stores.type === \"branch\";\nlet parentStore;\n$: parentStore =\n    showBranch &&\n        contextModalState &&\n        contextModalState.stores.type === \"branch\"\n        ? contextModalState.stores.parentStore\n        : null;\nlet nodeStore;\n$: nodeStore =\n    contextModalState === null ? null : contextModalState.stores.nodeStore;\nlet convertedNodeStore;\n$: convertedNodeStore =\n    nodeStore === null ? null : toReadableNodeState(nodeStore);\nlet nodeState;\n$: nodeState = convertedNodeStore === null ? null : $convertedNodeStore;\nlet children;\n$: children = nodeState === null ? null : nodeState.children;\nlet path;\n$: path = nodeState === null ? null : nodeState.path;\nlet childIndex;\n$: childIndex = path === null ? null : path[path.length - 1];\nconst { open } = getContext(\"simple-modal\");\nfunction hide() {\n    contextModalStore.set(null);\n}\nfunction loadMore() {\n    hide();\n    if (nodeStore && nodeState)\n        request($configStore, nodeStore, nodeState);\n}\nfunction openDeleteModal() {\n    hide();\n    open(DeleteConfirmationModal, {}, modalOptions);\n}\nfunction deleteBranch() {\n    hide();\n    if (parentStore && childIndex)\n        parentStore.deleteChildWithUndo(childIndex);\n}\nfunction openImportModal() {\n    hide();\n    open(ImportModal, {\n        importUnderStore: nodeStore,\n    }, modalOptions);\n}\nfunction openExportModal() {\n    hide();\n    open(ExportModal, {\n        store: nodeStore,\n    }, modalOptions);\n}\nfunction keyPressed(event) {\n    if (event.key === \"r\")\n        return loadMore();\n    if (event.key === \"a\")\n        return openImportModal();\n    if (event.key === \"s\" && showBranch)\n        return openExportModal();\n    if (event.key === \"d\" && showRoot)\n        return openDeleteModal();\n    if (event.key === \"d\" && showBranch)\n        return deleteBranch();\n}\nlet rootContainer;\nlet branchContainer;\nafterUpdate(() => {\n    if (rootContainer)\n        rootContainer.focus();\n    if (branchContainer)\n        branchContainer.focus();\n});\n</script>\n\n<style>\n  .container {\n    position: fixed;\n    z-index: 2;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    pointer-events: none;\n  }\n\n  .contextModal {\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    margin: 25px;\n    width: 150px;\n    pointer-events: all;\n    padding: 4px;\n    outline: none;\n  }\n</style>\n\n<div class=\"container\">\n  {#if showRoot}\n    <div\n      class=\"contextModal\"\n      style={toCss({ backgroundColor: colorLookup.bgDark, border: '1px solid', borderColor: colorLookup.border, color: colorLookup.textDark, left, top})}\n      bind:this={rootContainer}\n      on:mouseleave={hide}\n      on:mousedown\n      on:contextmenu|preventDefault|stopPropagation\n      on:keydown={keyPressed}\n      tabindex={0}>\n      <Button on:click={loadMore}>\n        <u>R</u>equest More\n      </Button>\n      <Button on:click={openImportModal}>\n        <u>A</u>dd Midi\n      </Button>\n      <Button on:click={openDeleteModal}>\n        <u>D</u>elete All\n      </Button>\n    </div>\n  {/if}\n\n  {#if showBranch}\n    <div\n      class=\"contextModalContainer\"\n      on:mouseleave={hide}\n      style={toCss({left, top})}>\n      <div\n        class=\"contextModal\"\n        style={toCss({backgroundColor: colorLookup.bgDark, border: \"1px solid\", borderColor: colorLookup.border, color: colorLookup.textDark, left, top})}\n        bind:this={branchContainer}\n        on:mousedown|preventDefault|stopPropagation\n        on:contextmenu|preventDefault|stopPropagation\n        on:keydown={keyPressed}\n        tabindex={0}>\n        <Button on:click={loadMore}>\n          <u>R</u>equest More\n        </Button>\n        <Button on:click={openImportModal}>\n          <u>A</u>dd Midi\n        </Button>\n        <Button on:click={openExportModal}>\n          <u>S</u>ave Audio\n        </Button>\n        <Button on:click={deleteBranch}>\n          <u>D</u>elete Branch\n        </Button>\n        <!--         TODO   <Button>Edit</Button>-->\n      </div>\n    </div>\n  {/if}\n</div>\n",
    "<script lang=\"ts\">import Button from \"../buttons/Button.svelte\";\nimport { root } from \"../state/trackTree\";\n;\nimport { undoStore } from \"../state/undo\";\nimport { getContext } from \"svelte\";\nimport colorLookup from \"../colors\";\nimport toCss from \"react-style-object-to-css\";\nlet rootState;\n$: rootState = $root;\nlet childrenMap;\n$: childrenMap = rootState.children;\nlet children;\n$: children = Object.entries(childrenMap).map(([idx, store]) => [\n    parseInt(idx),\n    store,\n]);\nfunction deleteEverything() {\n    children.map((pair) => pair[0]).forEach(root.deleteChild);\n    undoStore.clear();\n    close();\n}\nconst { close } = getContext(\"simple-modal\");\n</script>\n\n<style>\n  h1 {\n    margin-top: 0;\n  }\n</style>\n\n<div style=\"display: flex; flex-direction: column; align-items: center\">\n  <h1 style={toCss({color: colorLookup.text})}>Warning!</h1>\n  <span>You are about to delete everything. This cannot be undone!</span>\n  <span style=\"margin: 8px\">Are you sure?</span>\n\n  <div\n    style=\"display: flex; flex-direction: row; justify-content: space-around\">\n    <Button on:click={close}>Cancel</Button>\n    <Button on:click={deleteEverything}>I'm Sure!</Button>\n  </div>\n</div>\n",
    "<script lang=\"ts\">import { afterUpdate } from \"svelte\";\nimport { root } from \"../state/trackTree\";\nimport panzoom, { PanZoom } from \"panzoom\";\nimport TreeVisRoot from \"./TreeVisRoot.svelte\";\nimport colorLookup from \"../colors\";\nimport ContextModal from \"./ContextModal.svelte\";\nimport { contextModalStore } from \"./ContextModalStore\";\nimport toCss from \"react-style-object-to-css\";\nlet container;\nafterUpdate(() => {\n    const pan = panzoom(container, {\n        minZoom: 0.1,\n        maxZoom: 2,\n        zoomDoubleClickSpeed: 1,\n        smoothScroll: false,\n    });\n    pan.on(\"pan\", () => contextModalStore.set(null));\n    pan.on(\"zoom\", () => contextModalStore.set(null));\n    pan.on(\"transform\", () => contextModalStore.set(null));\n});\nlet treeContainer;\n</script>\n\n<style>\n  .tree-container {\n    height: 100%;\n    width: 100%;\n    flex-shrink: 0;\n    overflow: hidden;\n    outline: none;\n  }\n\n  .pan-container {\n    height: 100%;\n  }\n\n  .tree-position {\n    position: absolute;\n    left: 50%;\n    right: 50%;\n    top: 50%;\n    bottom: 50%;\n  }\n</style>\n\n{#if root != null}\n  <div\n    class=\"tree-container\"\n    style={toCss({color: colorLookup.textEmphasis, backgroundColor: colorLookup.bgLight, borderLeft: \"1px solid\", borderColor: colorLookup.border})}\n    bind:this={treeContainer}\n    on:mouseenter={() => treeContainer.focus()}>\n    <ContextModal />\n    <div class=\"pan-container\" bind:this={container}>\n      <div class=\"tree-position\">\n        <TreeVisRoot {treeContainer} />\n      </div>\n    </div>\n  </div>\n{/if}\n",
    "<script lang=\"ts\">import { root, toReadableNodeState } from \"../state/trackTree\";\n;\nimport { configStore } from \"../state/settings\";\nimport { request } from \"../bridge/broker\";\nimport colorLookup, { modalOptions } from \"../colors\";\nimport ImportModal from \"../persistence/ImportModal.svelte\";\nimport ExportModal from \"../persistence/ExportModal.svelte\";\nimport { getContext } from \"svelte\";\nimport { contextModalStore } from \"./ContextModalStore\";\nimport { audioStatusStore } from \"../audio/audioPlayer\";\n;\nimport { create_in_transition } from \"svelte/internal\";\nimport { play } from \"../audio/audioPlayer\";\n;\n;\nimport toCss from \"react-style-object-to-css\";\nexport let parentStore;\nexport let branchStore;\nexport let depth;\nexport let offset;\nexport let parentOffset;\nexport let treeContainer;\nlet convertedParentStore;\n$: convertedParentStore = toReadableNodeState(parentStore);\nlet parentState;\n$: parentState = $convertedParentStore;\nlet branchState;\n$: branchState = $branchStore;\nlet path;\n$: path = branchState.path;\nlet childIndex;\n$: childIndex = path[path.length - 1];\nlet pendingLoad;\n$: pendingLoad = branchState.pendingLoad;\nlet section;\n$: section = branchState.section;\nlet startsAt;\n$: startsAt = section.startsAt;\nlet endsAt;\n$: endsAt = section.endsAt;\nlet duration;\n$: duration = endsAt - startsAt;\nlet childStores;\n$: childStores = branchState.children;\nfunction leftClick(event) {\n    if (event.button === 0)\n        root.select(path);\n}\nfunction rightClick({ clientX, clientY }) {\n    contextModalStore.set({\n        coordinates: [clientX, clientY],\n        stores: {\n            type: \"branch\",\n            parentStore: parentStore,\n            nodeStore: branchStore,\n        },\n    });\n}\nlet onSelectedPath;\n$: onSelectedPath = branchState.onSelectedPath;\nlet selectedByParent;\n$: selectedByParent = branchState.selectedByParent;\nlet wasLastSelected;\n$: wasLastSelected = branchState.wasLastSelectedByParent;\nlet trackPlaying = false;\nlet sectionPlaying = false;\nlet edgeProgress = 0;\nlet nodeColor;\n$: nodeColor = onSelectedPath\n    ? sectionPlaying\n        ? colorLookup.nodePlaying\n        : colorLookup.nodeActive\n    : selectedByParent || (wasLastSelected && parentState.onSelectedPath)\n        ? colorLookup.nodeWarm\n        : colorLookup.nodeInactive;\nlet edgeColor;\n$: edgeColor = onSelectedPath\n    ? sectionPlaying\n        ? colorLookup.edgePlaying\n        : colorLookup.edgeActive\n    : selectedByParent || (wasLastSelected && parentState.onSelectedPath)\n        ? colorLookup.edgeWarm\n        : colorLookup.edgeInactive;\nlet edgePercentage;\n$: edgePercentage = sectionPlaying ? 100 : trackPlaying ? edgeProgress : 0;\nlet opacity;\n$: opacity = onSelectedPath && trackPlaying ? 25 : 100;\nlet edgeZ;\n$: edgeZ = onSelectedPath ? 1 : 0;\nlet numberOfLeavesStore;\n$: numberOfLeavesStore = branchStore.numberOfLeavesStore;\nlet numberOfLeaves;\n$: numberOfLeaves = $numberOfLeavesStore;\nlet placementOffset;\n$: placementOffset = offset + -numberOfLeaves / 2;\nlet placementStore;\n$: placementStore = branchStore.placementStore;\nlet childPlacements;\n$: childPlacements = $placementStore;\nlet offsetWidth;\n$: offsetWidth = Math.abs(parentOffset - offset);\nlet cw;\n$: cw = offsetWidth * 30;\nlet ch;\n$: ch = 150 / 2;\nlet lineWidth;\n$: lineWidth = offsetWidth * 60 + 10;\nlet lineLeft;\n$: lineLeft = Math.min(offset, parentOffset) * 60 - 5;\nlet node;\nfunction focusNode() {\n    if (node)\n        node.focus();\n}\nfunction unfocusNode() {\n    if ($contextModalStore === null)\n        treeContainer.focus();\n}\nconst { open } = getContext(\"simple-modal\");\nfunction loadMore() {\n    request($configStore, branchStore, branchState);\n}\nfunction deleteBranch() {\n    parentStore.deleteChildWithUndo(path[path.length - 1]);\n}\nfunction openImportModal() {\n    open(ImportModal, {\n        importUnderStore: branchStore,\n    }, modalOptions);\n}\nfunction openExportModal() {\n    open(ExportModal, {\n        store: branchStore,\n    }, modalOptions);\n}\nfunction keyPressed(event) {\n    if (event.key === \"r\")\n        return loadMore();\n    if (event.key === \"a\")\n        return openImportModal();\n    if (event.key === \"s\")\n        return openExportModal();\n    if (event.key === \"d\")\n        return deleteBranch();\n}\nfunction createNodeTransition(node, { offset }) {\n    return {\n        delay: Math.max(0, (endsAt - offset) * 1000),\n        duration: 0,\n        tick: (t) => {\n            if (t === 0) {\n                sectionPlaying = false;\n            }\n            else {\n                sectionPlaying = true;\n            }\n        },\n    };\n}\nfunction createEdgeTransition(node, { offset }) {\n    const delay = Math.max(0, (startsAt - offset) * 1000);\n    const duration = (endsAt - Math.max(startsAt, offset)) * 1000;\n    const startProgressSeconds = Math.max(0, offset - startsAt);\n    const startProgress = startProgressSeconds / (endsAt - startsAt);\n    const progressToGo = 1 - startProgress;\n    return {\n        delay: delay,\n        duration: duration,\n        tick: (t) => {\n            const progress = startProgress + progressToGo * t;\n            edgeProgress = progress * 100;\n        },\n    };\n}\nlet edgeGradient;\nlet nodeTransition;\nlet edgeTransition;\naudioStatusStore.subscribe((status) => {\n    if (node && edgeGradient) {\n        if (nodeTransition)\n            nodeTransition.end();\n        if (edgeTransition)\n            edgeTransition.end();\n        trackPlaying = false;\n        sectionPlaying = false;\n        if (onSelectedPath && status.type === \"on\") {\n            trackPlaying = true;\n            edgeProgress = 0;\n            nodeTransition = create_in_transition(node, createNodeTransition, status);\n            nodeTransition.start();\n            edgeTransition = create_in_transition(edgeGradient, createEdgeTransition, status);\n            edgeTransition.start();\n        }\n    }\n});\nfunction clickedEdge(event) {\n    console.log(event);\n    if (!onSelectedPath)\n        return;\n    const clickX = event.offsetX;\n    const clickY = event.offsetY;\n    const width = event.target.viewportElement.clientWidth;\n    const height = event.target.viewportElement.clientHeight;\n    let progress;\n    if (width === 10) {\n        progress = clickY / height;\n    }\n    else {\n        const fullDistance = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n        const clickDistance = Math.sqrt(Math.pow(clickX, 2) + Math.pow(clickY, 2));\n        progress = clickDistance / fullDistance;\n    }\n    play(startsAt + progress * duration);\n}\nlet pathStyle;\n$: pathStyle = toCss({ cursor: onSelectedPath ? 'pointer' : 'initial' });\nlet lineStyle;\n$: lineStyle = toCss({ left: lineLeft, top: (depth - 1) * ch * 2 + 24, transform: `scaleX(${offset < parentOffset ? -1 : 1})`, zIndex: edgeZ });\n</script>\n\n<style>\n  .node {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n\n    cursor: pointer;\n    outline: none;\n    transition: transform 0.2s ease-in-out, background-color 0.2s ease-in-out,\n      opacity 0.2s ease-in-out;\n  }\n\n  .node:hover {\n    transform: scale(1.1, 1.1);\n    transform-origin: center;\n  }\n\n  .label {\n    font-size: 30px;\n  }\n\n  .pendingLoad {\n    font-size: 18px;\n    text-align: center;\n    margin: 8px 0 0 0;\n    border-radius: 30%;\n    width: 100%;\n  }\n\n  .line {\n    position: absolute;\n  }\n\n  .placement {\n    position: absolute;\n    z-index: 2;\n  }\n\n  path {\n    transition: stroke 0.2s ease-in-out;\n  }\n</style>\n\n<div\n  class=\"placement\"\n  style={toCss({top: 150 * depth, left: 60 * offset - 25, pointerEvents: opacity === 100 ? \"initial\": \"none\"})}>\n  <div\n    on:mousedown={leftClick}\n    on:contextmenu|preventDefault={rightClick}\n    on:mouseenter={focusNode}\n    on:mouseleave={unfocusNode}\n    on:keypress={keyPressed}\n    bind:this={node}\n    class=\"node\"\n    style={toCss({backgroundColor: nodeColor, opacity: opacity})}\n    tabindex={0}>\n    <span class=\"label\">{childIndex}</span>\n  </div>\n  {#if pendingLoad > 0}\n    <p\n      class=\"pendingLoad\"\n      style={toCss({color: colorLookup.textDark, backgroundColor: colorLookup.bgLight, border: \"2px solid\", borderColor: colorLookup.border})}>\n      +{pendingLoad}\n    </p>\n  {/if}\n</div>\n{#if childPlacements.length > 0}\n  {#each childPlacements as [idx, placement] (idx)}\n    <svelte:self\n      parentStore={branchStore}\n      branchStore={childStores[idx]}\n      depth={depth + 1}\n      offset={placementOffset + placement}\n      parentOffset={offset}\n      {treeContainer} />\n  {/each}\n{/if}\n<svg\n  class=\"line\"\n  width={lineWidth}\n  height={ch * 2 + 2}\n  style={lineStyle}>\n  <linearGradient\n    bind:this={edgeGradient}\n    id={`linear${depth},${offset}`}\n    gradientUnits=\"userSpaceOnUse\"\n    x1=\"0%\"\n    y1=\"0%\"\n    x2={offset === parentOffset ? '0%' : '100%'}\n    y2=\"100%\">\n    <stop offset=\"0%\" stop-color={colorLookup.edgePlaying} />\n    <stop offset={edgePercentage + '%'} stop-color={colorLookup.edgePlaying} />\n    <stop offset={edgePercentage + '%'} stop-color={edgeColor} />\n  </linearGradient>\n  <path\n    d={`m 5 0 c 0 ${ch + 0.5} ${cw * 2} ${ch + 0.5} ${cw * 2} ${ch * 2 + 1}`}\n    stroke={`url(#linear${depth},${offset})`}\n    stroke-width=\"6px\"\n    fill=\"none\"\n    style={pathStyle}\n    on:click={clickedEdge} />\n</svg>\n",
    "<script lang=\"ts\">import { root } from \"../state/trackTree\";\n;\nimport TreeVisBranch from \"./TreeVisBranch.svelte\";\nimport colorLookup, { modalOptions } from \"../colors\";\nimport { contextModalStore } from \"./ContextModalStore\";\nimport ImportModal from \"../persistence/ImportModal.svelte\";\nimport { configStore } from \"../state/settings\";\nimport { getContext } from \"svelte\";\nimport DeleteConfirmationModal from \"./DeleteConfirmationModal.svelte\";\nimport { audioStatusStore } from \"../audio/audioPlayer\";\n;\nimport toCss from \"react-style-object-to-css\";\nimport { request } from \"../bridge/broker\";\nexport let treeContainer;\nlet branchState;\n$: branchState = $root;\nlet pendingLoad;\n$: pendingLoad = branchState.pendingLoad;\nlet childStores;\n$: childStores = branchState.children;\nfunction leftClick(event) {\n    if (event.button === 0)\n        root.select([]);\n}\nlet numberOfLeavesStore;\n$: numberOfLeavesStore = root.numberOfLeavesStore;\nlet numberOfLeaves;\n$: numberOfLeaves = $numberOfLeavesStore;\nlet placementOffset;\n$: placementOffset = -numberOfLeaves / 2;\nlet placementStore;\n$: placementStore = root.placementStore;\nlet childPlacements;\n$: childPlacements = $placementStore;\nfunction rightClick(event) {\n    contextModalStore.set({\n        coordinates: [event.clientX, event.clientY],\n        stores: {\n            type: \"root\",\n            nodeStore: root,\n        },\n    });\n}\nlet node;\nfunction focusNode() {\n    if (node)\n        node.focus();\n}\nfunction unfocusNode() {\n    if ($contextModalStore === null)\n        treeContainer.focus();\n}\nfunction loadMore() {\n    request($configStore, root, $root);\n}\nfunction openDeleteModal() {\n    open(DeleteConfirmationModal, {}, modalOptions);\n}\nconst { open } = getContext(\"simple-modal\");\nfunction openImportModal() {\n    open(ImportModal, {\n        importUnderStore: root,\n    }, modalOptions);\n}\nfunction keyPressed(event) {\n    if (event.key === \"r\")\n        return loadMore();\n    if (event.key === \"a\")\n        return openImportModal();\n    if (event.key === \"d\")\n        return openDeleteModal();\n}\nlet audioPlaying;\n$: audioPlaying = $audioStatusStore.type === \"on\";\nlet nodeColor;\n$: nodeColor = audioPlaying\n    ? colorLookup.nodePlaying\n    : colorLookup.nodeActive;\n</script>\n\n<style>\n  .node {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    outline: none;\n\n    cursor: pointer;\n    transition: transform 0.2s ease-in-out, background-color 0.2s ease-in-out;\n  }\n\n  .node:hover {\n    transform: scale(1.1, 1.1);\n    transform-origin: center;\n  }\n\n  .pendingLoad {\n    font-size: 18px;\n    text-align: center;\n    margin: 8px 0 0 0;\n    border-radius: 30%;\n    width: 100%;\n  }\n\n  .placement {\n    position: absolute;\n    left: -25px;\n    z-index: 2;\n  }\n</style>\n\n{#if childPlacements.length > 0}\n  {#each childPlacements as [idx, placement] (idx)}\n    <TreeVisBranch\n      parentStore={root}\n      branchStore={childStores[idx]}\n      depth={1}\n      offset={placementOffset + placement}\n      parentOffset={0}\n      {treeContainer} />\n  {/each}\n{/if}\n<div class=\"placement\">\n  <div\n    on:mousedown={leftClick}\n    on:contextmenu|preventDefault={rightClick}\n    on:mouseenter={focusNode}\n    on:mouseleave={unfocusNode}\n    bind:this={node}\n    on:keypress={keyPressed}\n    class=\"node\"\n    style={toCss({backgroundColor: nodeColor})}\n    tabindex={0}>\n    <span class=\"label\">Root</span>\n  </div>\n  {#if pendingLoad > 0}\n    <p\n      class=\"pendingLoad\"\n      style={toCss({color: colorLookup.textDark, backgroundColor: colorLookup.bgDark, border: \"2px solid\", borderColor: colorLookup.border})}>\n      +{pendingLoad}\n    </p>\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "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"
}